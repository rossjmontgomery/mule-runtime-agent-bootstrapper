#%RAML 0.8
title: ARM REST services
version: 1.5
mediaType: application/json
securedBy: [x-token]
baseUri: https://anypoint.mulesoft.com/hybrid/api/v1
#baseUri: https://mocksvc.mulesoft.com/mocks/91602b35-ba82-4225-bb8a-08334735c2c1/hybrid/api/v1

securitySchemes:
  - x-token: !include security-bearer.yaml

traits:
  - errorCodes: !include common/error-codes.yaml
  - env-org-pair: !include common/env-org-pair.yaml

resourceTypes:
  - collection: !include common/collection.yaml
  - collection-item: !include common/collection-item.yaml
  - servers-collection: !include common/servers-collection.yaml

/servers:
  is: [env-org-pair]
  type:
      servers-collection:
        exampleItem: !include samples/hybrid-include-server.sample
  description: >
     <p>A server refers to an instance of Mule Runtime ( or perhaps of the Gateway runtime, on older versions) that is registered on the Runtime Manager. A server can be itself a target or it can be a part of a target if it forms part of a server group or cluster.</p>
     <p>In order to be managed by the Runtime Manager, a server must first be registered into the platform. Each server is identified with a Signed Certificate, which is unique across all the registered servers. Runtime Manager acts as a Certificat se Authority and accepts connections from servers that have a signed certificate. On the other hand, the registered runtimes have more restrictive access, they only accept connections from the Certificate Authority (Runtime Manager).</p>
  post:
    is: [errorCodes]
    description: >
      <p>Registers a server. The request is just a Sign Certificate Request. Once the SCR is accepted then ARM return with a signed certificate to be added in the keystore living under the mule/conf folder of the Runtime to be Registered.</p>

      <p>The athorization token in order to register a new server has to be aquired from the endpoint servers/token.</p>
    body:
      application/json:
        example: !include samples/register-server.sample
        schema: !include schemas/create-server-schema.json
    responses:
      200:
        headers:
          X-ANYPNT-ENV-ID:
            description: Environment where the server was created.
          X-ANYPNT-ORG-ID:
            description: Organization where the server was created.
        body:
          application/octet-stream:
  get:
    description: >
      <p>Get the registered servers information.</p>
    queryParameters:
      belongsTo:
        description: List servers on a particular target
        enum: [SERVER_GROUP, CLUSTER, NO_GROUP]
    responses:
      200:
  /{serverId}:
      description: <p>Operate over a particular server</p>
      is: [env-org-pair]
      type:
        collection-item:
          exampleItem: !include samples/hybrid-include-server.sample
          schemaItem: !include schemas/server-schema.json
      get:
        description: <p>Get information about a particular server</p>
        responses:
          200:
      patch:
        description: Modify <b>only</b> the server name
        responses:
          202:
      delete:
        description: >
          Forcibly remove the server from Runtime Manager:
          <ol>
          <li> Removes the server from its server group.</li>
          <li> Deletes related server artifacts from all deployments. Does not attempt to undeploy the server artifacts from the server. Records are simply deleted.</li>
          <li> If the server is connected, the connection is terminated and will not be accepted in future.</li>
          </ol>
          <br><br>
          To cleanly delete a server, first:
          <ol>
          <li> Remove the server from its group.</li>
          <li> Delete all deployments whose deployment target is this server.</li>
          <li> Wait until all applications are undeployed.</li>
          </ol>
        responses:
          204:
  /registrationToken:
      is: [env-org-pair]
      description: >
        <p> Get a registration token. This token needs to be used to register a new server.</p>
      get:
        responses:
          200:
            body:
              application/json:
                example: !include samples/registration-token.sample
                schema: !include schemas/registration-token-schema.json

/serverGroups:
  description: >
     <p>A server group is an agroupation of servers that's a considered a unique target. The servers in a server group do not cooperate as occurs in a cluster topology. However, they are treated as a unit by Runtime Manager, deployment and configuration tasks are performed along all the servers in a server group.</p>
  is: [env-org-pair]
  type:
    collection:
      exampleItem: !include samples/hybrid-include-serverGroup.sample
  post:
    description: >
      <p>Create a server group from a list of Servers. The listed servers must not belong to any other server group or cluster.</p>
    body:
      application/json:
        example: |
          {
            "name": "Group2",
            "serverIds": [  71, 72 ]
          }
    responses:
      201:
  get:
    description: >
     <p>Get the list of all registered Server Groups</p>
    responses:
      200:
#  /{serverGroupId}:
#    description: >
#      <p>Performs operations on a particular Server Group</p>
#    is: [env-org-pair]
#    type:
#      collection-item:
#        exampleItem: !include samples/hybrid-include-serverGroup.sample
#        schemaItem: !include schemas/server-group-schema.json
#    get:
#      description: >
#        <p>Get information about a specific server group.</p>
#      responses:
#        200:
#    delete:
#      description: >
#        <p>Delete a server group.</p>
#      responses:
#        200:
#    /servers/{serverId}:
#      description: >
#       <p> Perform operations on a particular server that is part of the server group</p>
#      is: [env-org-pair]
#      post:
#        description: >
#          <p> Add server to server group. Any artifacts that have been deployed to this server group will be also deployed to the new server. Returns the updated server. </p>
#        responses:
#          201:
#            body:
#              application/json:
#                example: !include samples/hybrid-include-serverGroup.sample
#          409:
#            description: Conflict.
#            body:
#              application/json:
#                example: |
#                  { "message" : "There are applications already deployed on the servers to be added"}
#      delete:
#        description: >
#         <p> Remove a server from a server group.  This undeploys any artifacts from the server that are deployed to this server group. </p>
#        responses:
#          204:
/clusters:
  description: >
    <p>A Server cluster consists of a set of tightly connected servers that work together so that, in many respects, they can be viewed as a single system. Unlike Server groups, server clusters share information and statuses amongst themselves.</p>
  is: [env-org-pair]
  type:
    collection:
      exampleItem: !include samples/hybrid-include-cluster.sample
  post:
    description: >
      <p>Create a Cluster from a set of registered servers. The listed servers cannot already belong to another Cluster or Server Group.</p>
    body:
      application/json:
        example: !include samples/hybrid-create-cluster.sample
        schema: !include schemas/cluster-creation-schema.json
    responses:
      201:
  get:
    description: >
      <p> Get the list of all registered clusters.</p>
    responses:
      200:
#  /{clusterId}:
#    description: >
#      <p>Perform actions in a particular cluster.</p>
#    is: [env-org-pair]
#    type:
#      collection-item:
#        exampleItem: !include samples/hybrid-include-cluster.sample
#        schemaItem: !include schemas/cluster-schema.json
#    get:
#      description: >
#        <p>Get information about one cluster in particular.</p>
#      responses:
#        200:
#    patch:
#      description: >
#        <p>Modify a cluster. Currently, the only field that can be modified is the Name of the cluster.</p>
#    delete:
#      description: >
#        <p>Delete a cluster.</p>
#      responses:
#        202:
#    /servers:
#      description: >
#        <p>Perform actions on a particular server in a cluster.</p>
#      is: [env-org-pair]
#      post:
#        description: >
#         <p>Add a server to the cluster. Any artifacts that were already deployed to this cluster will also be deployed to the new server. Returns the updated server. The serverIp should only be included when adding servers to a Unicast cluster </p>
#        body:
#          application/json:
#            example: !include samples/hybrid-add-cluster-server.sample
#            schema: !include schemas/cluster-add-server-schema.json
#        responses:
#          202:
#          409:
#            description: Conflict.
#            body:
#              application/json:
#                example: |
#                  { "message" : "There are applications already deployed on the servers to be added"}
#      /{serverId}:
#        description: >
#          <p>Perform actions on a particular server in a cluster.</p>
#        is: [env-org-pair]
#        delete:
#          description: >
#            <p>Remove server from the cluster.  This undeploys any artifacts from the server which are deployed to this cluster.</p>
#          responses:
#            204:
/targets:
  description: >
    <p>A target can be a Server, Server Group or Cluster.<p/>
  /{targetId}/components:
    is: [env-org-pair]
    description: >
      <p>A component is a configurable piece of a target. For example, all the third party integration is a new component over a target.</p>
    get:
      responses:
        200:
#    /{componentId}:
#      is: [env-org-pair]
#      type:
#        collection-item:
#          exampleItem: !include samples/hybrid-include-component.sample
#          schemaItem: !include schemas/component-schema.json
#      get:
#        responses:
#          200:
#      put:
#        responses:
#          200:
#      patch:
#        responses:
#          200:
/applications:
  description: >
    <p>An application refers to a Mule Application/Proxy that is running in a Mule Runtime. It's important to differenciate the application from its corresponding binary. One same binary could be deployed twice and will represent two different applications.</p>
  is: [env-org-pair]
  type:
    collection:
      exampleItem: !include samples/hybrid-include-application.sample
  post:
    description: >
      <p>Deploy an artifact to a deployment target. Initiates deployment and creates server artifacts.</p>
    body:
      multipart/form-data:
        formParameters:
          file:
            description: The file to be uploaded
            type: file
          artifactName:
            description: The name of the artifact.
            type: string
          targetId:
            description: the id of the target.
            type: string
    responses:
      201:
  get:
    description: >
      <p>Get deployed applications that matches the query params</p>
    queryParameters:
      applicationId:
        description: Retrieves a unique application.
        type: number
      targetId:
        description: Retrieve all of the applicatons deployed to a target.
        type: number
      satus:
        description: Deployment status
        enum: [STARTED, STARTING, UNDEPLOYED, DEPLOYMENT_FAILED, PARTIALLY_STARTED]
    responses:
      200:
#  /{applicationId}:
#    description: >
#      <p>Operate over a single application.</p>
#    is: [env-org-pair]
#    type:
#      collection-item:
#        exampleItem: !include samples/hybrid-include-application.sample
#        schemaItem: !include schemas/application-schema.json
#    get:
#      description: >
#        <p>Get The application deployment/status information</p>
#      responses:
#        200:
#    delete:
#      description: >
#        <p>Undeploy artifact from all servers in deployment target and d#elete the deployment</p>
  #    responses:
  #      204:
  #        description: Undeployment is in progress.
#    patch:
#      description: >
#        <p>Redeploys the app with a new artifact. If the file is not specified in the request then Runtime Manager redeploys the same file that was already in the server. If the content type is application/json then it allows to change the status of the deployed application from *started* to *stopped* or from *stopped* to *started*. No other application status change is allowed.</p>
#      body:
#        multipart/form-data:
#        application/json:
#          example: |
#            { "desiredStatus": "STOPPED"}
#      responses:
#        202:
#    /artifact:
#      is: [env-org-pair]
#      get:
#        description: <p>Gets the artifact binary.<p>
#        responses:
#          200:
#            body:
#              application/octet-stream:
/alerts:
  description: >
    <p>Alerts are the composition of a trigger and an event which is triggered based on conditions that are evaluated over Runtime Manager resources. This endpoint allows you to administrate the alerts that can be triggered by ARM.</p>
  is: [env-org-pair]
  type:
    collection:
      exampleItem: !include samples/hybrid-include-alert.sample
#  /{alertId}:
#      is: [env-org-pair]
#      type:
#        collection-item:
#          exampleItem: !include samples/hybrid-include-alert.sample
#          schemaItem: !include schemas/alert-schema.json
